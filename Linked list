/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		LinkedList<String> l_list=new LinkedList<String>();
		l_list.add("Red");
		l_list.add("black");
		l_list.add("Blue");
		l_list.add("Green");
		l_list.add("Pink");
		l_list.add("Yellow");
		System.out.println(l_list);
		
		//iteration through the LinkedList
		for(String element:l_list){
		    System.out.print(element+" ");
		}
		System.out.println();
		//iterate form specific element
		Iterator p=l_list.listIterator(3);
		while(p.hasNext()){
		    System.out.println(p.next());
		}
		Iterator it=l_list.descendingIterator();
		while(it.hasNext())
		System.out.print(it.next()+" ");
		System.out.println();
		
		//add element in link list
		l_list.add(2,"Grey");
		System.out.println(l_list);
		
		//add first and add at last
        l_list.addFirst("maroon");
        l_list.addLast("gold");
        
        System.out.println(l_list);
		//add at first
        l_list.offerFirst("silver");
        System.out.println(l_list);
        //add at last
        l_list.offerLast("mustard");
        System.out.println(l_list);
        
        
        //insert at specific index
        LinkedList<String> l_list1=new LinkedList<String>();                
        l_list1.add("topaz");
        l_list1.add("lightBlue");
        l_list.addAll(1,l_list1);
        System.out.println(l_list);
        
        //WAP to get first and last occurance of specified element
        System.out.println(l_list.getFirst());
        System.out.println(l_list.getLast());
        
        //print positions
        for(int i=0;i<l_list.size();i++){
            System.out.println("Element at position "+i+" is "+l_list.get(i));
        }
        //remove at particular index
        l_list.remove(2);
        System.out.println(l_list);
        
        //remove first and last element of link list
        System.out.println("remove first "+l_list.removeFirst());
        System.out.println("remove last "+l_list.removeLast());
        
        //remove all element of link list
        // l_list.clear();
        // System.out.println(l_list);
        
        //swap 2 element in link list
        Collections.swap(l_list,3,5);
        System.out.println(l_list);
        
        //shuffle elements of link list
        Collections.shuffle(l_list);
        System.out.println(l_list);
        
        //join 2 link list
        l_list.addAll(l_list1);
        System.out.println(l_list);
        
        LinkedList<String> c1=new LinkedList<String>();
        c1.add("Red");
        c1.add("Blue");
        c1.add("Black");
        c1.add("Pink");
        c1.add("white");
        LinkedList<String> c2=new LinkedList<String>();
        c2=(LinkedList)c1.clone();
        System.out.println(c2);
        
        //peekFirst
        String x=c1.peekFirst();
        System.out.println("peek First "+x);
        
        //leafnode or last element retrieve but doenot remove
        x=c1.peekLast();
        System.out.println("Peek Last "+x);
        
        //element exist in link list or not
        if(c1.contains("Blue")){
            System.out.println("Color is present in linked list");
        }
        else{
            System.out.println("Color is not present in linked list");
        }
        
        //convertin linked list to array list
        List<String> list=new ArrayList<String>(c1);
        for(String str:list){
            System.out.print(str);
        }
        System.out.println();
        //compare 2 link list /element to element comparison
        LinkedList<String> c3=new LinkedList<String>();
        for (String e:c1){
            c3.add(c2.contains(e)?"Yes":"No");}
        System.out.println(c3);
        
        //LinkedList list is empty or not
        System.out.println(c1.isEmpty());
        c1.removeAll(c1);
        System.out.println(c1.isEmpty());
        
        //replacin elements wit new value
        c2.set(1,"SkyBlue");
        System.out.println(c2);
        
        
                	}
}
